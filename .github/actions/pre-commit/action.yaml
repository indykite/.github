#
# DO NOT EDIT!!!
# Managed by GitHub Action and synced from a private repo!
#
---
name: pre-commit
description: re-usable 'pre-commit' Github Action for formatting and linting
inputs:
  action_timeout:
    description: Allowed time for action execution in minutes
    required: false
    default: "10"
  github_token:
    description: Github access token for 'ops-common//pre-commit-autoupdate' to work, must be PAT-type
    required: false
    default: ""
  checkout_fetch_master:
    description: Whether to fetch 'origin/master', requires for certain checks, controlled via env.GH_CHECKOUT_FETCH_MASTER
    default: "0"
    required: false
  pre_commit_skip:
    description: Any steps to skip, useful for "heavy" or completed parallel tests, i.e. golang, commitlint
    default: ""
    required: false
  tf_plugin_cache_dir:
    description: Terraform plugin cache dir, replacement for action-wide env var. Normally, do not need to be updated
    default: "~/.terraform.d/plugin-cache"
    required: false
  trivy_cache_dir:
    description: Trivy DB cache dir, replacement for action-wide env var. Normally, do not need to be updated
    default: "~/.cache/trivy"
    required: false
runs:
  using: composite
  steps:
    - name: actions/checkout/fetch-depth
      id: fetch-depth
      shell: bash
      run: echo "fetch-depth=$(expr ${{ github.event.pull_request.commits }} + 1)" >> "$GITHUB_OUTPUT"
    - name: actions/checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: ${{ steps.fetch-depth.outputs.fetch-depth }}
    - name: actions/checkout/fetch ${{ github.base_ref }}
      if: inputs.checkout_fetch_master == '1'
      shell: bash
      run: git fetch origin ${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
    - name: Checking commit ${{ env.GITHUB_SHA }}
      id: action-prep
      shell: bash
      run: |
        echo "Checking commit $GITHUB_SHA"
        echo "IS_TERRAFORM=$(grep -c terraform .pre-commit-config.yaml)" >> "$GITHUB_OUTPUT"
        echo "IS_GOLANG=$(grep -cE "(brew install.* go |golang)" .pre-commit-config.yaml)" >> "$GITHUB_OUTPUT"
        echo "CACHE_MONTH=$(date +'%Y%m')" >> "$GITHUB_OUTPUT"
    - name: actions/cache/restore
      uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809
      id: cache
      with:
        lookup-only: ${{ github.event_name != 'pull_request' }}
        path: |
          /home/linuxbrew/.linuxbrew
          ~/.cache
          ${{ inputs.trivy_cache_dir }}
          ${{ inputs.tf_plugin_cache_dir }}
        key: >-
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('./.pre-commit-config.y*', format('{0}/.pkg_map.rc', github.action_path) )
          }}-state-${{ steps.action-prep.outputs.CACHE_MONTH }}
    - name: setup/python3
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      if: (github.event_name != 'pull_request' && !steps.cache.outputs.cache-hit) || github.event_name == 'pull_request'
      with:
        python-version: "3.13"
    - name: setup/opentofu
      uses: opentofu/setup-opentofu@000eeb8522f0572907c393e8151076c205fdba1b
      if: >-
        steps.action-prep.outputs.IS_TERRAFORM > 0
        && ((github.event_name != 'pull_request' && !steps.cache.outputs.cache-hit) || github.event_name == 'pull_request')
    - name: setup/golang
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
      with:
        go-version-file: go.mod
      if: >-
        steps.action-prep.outputs.IS_GOLANG > 0
        && ((github.event_name != 'pull_request' && !steps.cache.outputs.cache-hit) || github.event_name == 'pull_request')
    - name: setup/pre-commit
      if: (github.event_name != 'pull_request' && !steps.cache.outputs.cache-hit) || github.event_name == 'pull_request'
      shell: bash
      env:
        IS_CACHE: ${{ steps.cache.outputs.cache-hit }}
        IS_DEBUG: ${{ runner.debug }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        TG_PROVIDER_CACHE: 1
        TG_PROVIDER_CACHE_DIR: ${{ inputs.tf_plugin_cache_dir }}
        TF_PLUGIN_CACHE_DIR: ${{ inputs.tf_plugin_cache_dir }}
        TRIVY_CACHE_DIR: ${{ inputs.trivy_cache_dir }}
      run: |-
        timeout ${{ inputs.action_timeout }}m $GITHUB_ACTION_PATH/script.sh
    - name: actions/cache/save
      uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809
      if: (!steps.cache.outputs.cache-hit)
      with:
        path: |
          /home/linuxbrew/.linuxbrew
          ~/.cache
          ${{ inputs.trivy_cache_dir }}
          ${{ inputs.tf_plugin_cache_dir }}
        key: >-
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('./.pre-commit-config.y*', format('{0}/.pkg_map.rc', github.action_path) )
          }}-state-${{ steps.action-prep.outputs.CACHE_MONTH }}
    - name: pre-commit checks
      if: github.event_name == 'pull_request'
      shell: bash
      env:
        IS_DEBUG: ${{ runner.debug }}
        PRE_COMMIT_SKIP: ${{ inputs.pre_commit_skip }}
        TG_PROVIDER_CACHE: 1
        TG_PROVIDER_CACHE_DIR: ${{ inputs.tf_plugin_cache_dir }}
        TF_PLUGIN_CACHE_DIR: ${{ inputs.tf_plugin_cache_dir }}
        TRIVY_CACHE_DIR: ${{ inputs.trivy_cache_dir }}
      run: |-
        PRE_COMMIT_ARGS=("--all-files" "--show-diff-on-failure" "--color=always" "--hook-stage" "pre-commit")
        if [[ ${IS_DEBUG} == "1" ]]; then
            PRE_COMMIT_ARGS+=("--verbose")
        fi
        SKIP="${PRE_COMMIT_SKIP// /}" time pre-commit run --config .pre-commit-config-ci.yaml "${PRE_COMMIT_ARGS[@]}"
